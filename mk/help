.PHONY: help
help:
	@echo "usage: make <target>"
	@echo "targets:"
	@echo "             build: build the binary for {linux,darwin}/amd64"
	@echo "                    the target OS is determined by the one make"
	@echo "                    is ran on. You can specify the debug option"
	@echo "                    with DEBUG=yes to include debugging information"
	@echo "                    on the eBPF program. To do that you can simply"
	@echo "                    invoke make with 'make DEBUG=yes'."
	@echo "     build-no-ebpf: build the binary with no eBPF support. This is especially"
	@echo "                    useful for automated compilation checks and portability."
	@echo ""
	@echo "           rpm-dbg: show the value of variables leveraged when building"
	@echo "                    the RPMs."
	@echo "           sources: bundle all the necessary sources in a *.tar.gz file"
	@echo "                    which will be embedded in a SRPM."
	@echo "              srpm: create a SRPM."
	@echo "               rpm: create a binary RPM."
	@echo "          rpm-mock: leverage mock to build the RPM, mimicking what Koji will do."
	@echo "         rpm-clean: clean the directories leveraged to build all the RPM stuff."
	@echo ""
	@echo "           tc-show: show information gathered through tc(8) pertaining the eBPF backend."
	@echo "          tc-clean: remove the qdisc implicitly created when loading the eBPF program."
	@echo "        ebpf-trace: show the contents of the kernel's trace pipe where the"
	@echo "                    debug information of eBPF programs is dumped."
	@echo "         prog-list: show information of loaded eBPF programs named marker."
	@echo ""
	@echo "   start-ipv4-flow: write to flowd-go's named pipe to start an IPv4 flow."
	@echo "     end-ipv4-flow: write to flowd-go's named pipe to end an IPv4 flow."
	@echo "   start-ipv6-flow: write to flowd-go's named pipe to start an IPv6 flow."
	@echo "     end-ipv6-flow: write to flowd-go's named pipe to end an IPv6 flow."
	@echo ""
	@echo "  start-dummy-flow: send an HTTP GET request to flowd-go's API to start an IPv6 flow."
	@echo "    end-dummy-flow: send an HTTP GET request to flowd-go's API to end an IPv6 flow."
	@echo "          api-flow: send an HTTP POST request to flowd-go's API with a JSON payload"
	@echo "                    describing the flow ID to send downstream to the backends. The"
	@echo "                    path to the JSON file describing the flow ID can be passed through"
	@echo "                    the SPEC option. The default SPEC is plugins/api/testdata/start.json"
	@echo ""
	@echo "      docker-start: start the development container in the background. You can pass the"
	@echo "                    additional argument FLAVOUR with a value of one of {dev,test,release}"
	@echo "                    to specify the image to run. By default FLAVOUR is set to dev. Passing"
	@echo "                    the argument looks like: 'make docker-start FLAVOUR=test'."
	@echo "      docker-shell: open a shell into the development container. Note it must be"
	@echo "                    started first with the 'docker-start' target."
	@echo "       docker-stop: stop the development container."
	@echo "      docker-build: build the development container."
	@echo "       docker-push: push the built image to GitHub's registry."
	@echo ""
	@echo "     firefly-start: send a firefly as defined in plugins/fireflyp/testdata/start_firefly.json."
	@echo "       firefly-end: send a firefly as defined in plugins/fireflyp/testdata/end_firefly.json."
	@echo "    firefly-listen: listen for outgoing fireflies on port 10515."
	@echo ""
	@echo "             clean: delete everything defined as rubbish."
