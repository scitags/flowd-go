package main

import (
	"fmt"
	"log/slog"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/scitags/flowd-go/types"
	"github.com/spf13/cobra"
)

type channels struct {
	// Channels for transmitting flowIDs from plugins to backends.
	// There's one per channel and one per backend
	plugins  []chan types.FlowID
	backends []chan types.FlowID

	// FlowIDs generated by any plugin will be funneled through an
	// aggregate plugin to make the main for-select loop that much
	// easier to write.
	aggFlowIDs chan types.FlowID

	// Broadcast channel for exiting plugins and backends cleanly
	done chan struct{}

	// Channel on which to receive OS signals
	signals chan os.Signal
}

func run(cmd *cobra.Command, args []string) {
	slog.Debug("reading configuration")
	conf, err := ReadConf(confPath)
	if err != nil {
		slog.Error("couldn't read the configuration", "err", err)
		return
	}

	slog.Debug("writing pid")
	if err := os.WriteFile(conf.PidPath, []byte(fmt.Sprintf("%d\n", os.Getpid())), 0644); err != nil {
		slog.Error("couldn't create the PID file", "path", conf.PidPath, "err", err)
	}
	defer os.Remove(conf.PidPath)

	slog.Debug("creating plugins")
	plugins, err := createPlugins(conf)
	if err != nil {
		slog.Error("couldn't create the plugins", "err", err)
	}
	defer cleanupPlugins(plugins)

	slog.Debug("creating backends")
	backends, err := createBackends(conf)
	if err != nil {
		slog.Error("couldn't create the backends", "err", err)
	}
	defer cleanupBackends(backends)

	slog.Debug("solving plugin-backend dependencies")
	if err := pluginBackendDependencies(plugins, backends); err != nil {
		slog.Error("couldn't fulfill the plugin-backend dependencies", "err", err)
		return
	}

	slog.Debug("creating enrichers")
	enrichers, err := createEnrichers(conf)
	if err != nil {
		slog.Error("couldn't initialise the enrichers", "err", err)
	}
	defer cleanupEnrichers(enrichers)

	chs := channels{
		plugins:    make([]chan types.FlowID, 0, len(plugins)),
		backends:   make([]chan types.FlowID, 0, len(backends)),
		aggFlowIDs: make(chan types.FlowID),
		done:       make(chan struct{}),
		signals:    make(chan os.Signal, 1),
	}

	for i, plugin := range plugins {
		chs.plugins = append(chs.plugins, make(chan types.FlowID))
		go plugin.Run(chs.done, chs.plugins[i])
	}

	for i, backend := range backends {
		chs.backends = append(chs.backends, make(chan types.FlowID))
		go backend.Run(chs.done, chs.backends[i])
	}

	for _, enricher := range enrichers {
		go enricher.Run(chs.done)
	}

	// Funnel plugin flowIDs into an aggregate channel.
	// Buffer the channel so that consumers (i.e. backends)
	// can have some wiggle room if under pressure.
	for i, ch := range chs.plugins {
		go func(c chan types.FlowID, i int) {
			slog.Debug("began listening for plugin flowIDs", "i", i)
			for flowID := range c {
				slog.Debug("funneling flowID", "i", i)
				chs.aggFlowIDs <- flowID
			}
		}(ch, i)
	}

	// Set up the machinery for catching SIGINT (i.e. os.Interrupt) and SIGTERM
	// which will be sent by SystemD when stopping/restarting the service.
	signal.Notify(chs.signals, os.Interrupt, syscall.SIGTERM)

	// Simply listen for events on the aggregated channel and dispatch
	// them to the backends. Another option could be reflect.Select,
	// although it's much less performing... Could a point-to-point
	// (i.e. mesh) architecture be better?
	slog.Info("let's go!", "nPlugins", len(plugins), "nBackends", len(backends), "nEnrichers", len(enrichers))
	for {
		select {
		case flowID, ok := <-chs.aggFlowIDs:
			if !ok {
				slog.Warn("somebody closed the aggregated channel!")
				return
			}

			dispatchChans := make(map[types.Flavour][]chan *types.FlowInfo)
			switch flowID.State {
			case types.START:
				if len(enrichers) > 0 {
					sourceChans := map[types.Flavour]chan *types.FlowInfo{}
					for t, e := range enrichers {
						p, err := e.WatchFlow(flowID)
						if err != nil {
							slog.Error("error watching flow", "flavour", t, "err", err)
							continue
						}

						sourceChans[t] = p.DataChan
						for i := 0; i < len(backends); i++ {
							dispatchChans[t] = append(dispatchChans[t], make(chan *types.FlowInfo))
						}
					}

					go broadcastEnrichment(sourceChans, dispatchChans)
				}

			case types.END:
				flowID.EndTs = time.Now().UTC()

				for t, e := range enrichers {
					ts, ok := e.ForgetFlow(flowID)
					if !ok {
						slog.Warn("tried to forget a non-existent flow", "flavour", t, "flowID", flowID)
						continue
					}

					// If running with 2 enrichers, the start timestamps should be the same...
					flowID.StartTs = ts
				}
			}

			slog.Debug("dispatching flowID to backends")
			for i, ch := range chs.backends {
				if flowID.State == types.START && len(enrichers) > 0 {
					flowID.FlowInfoChans = make(map[types.Flavour]chan *types.FlowInfo, len(enrichers))
					for t := range enrichers {
						flowID.FlowInfoChans[t] = dispatchChans[t][i]
					}
				}
				ch <- flowID
			}
		case <-chs.signals:
			close(chs.done)
			return
		}
	}
}
